terminal11

#### shortcut key
ctrl+shift+c //copy from screen of terminal
ctrl+shift+v or shift+insert //paste to terminal
ctrl+d //Ending terminal line input end of file(EOF)
ctrl+c //Kill a process
ctrl+z //suspend a process

ctrl+u //clear current line command

#### commands
clear screen of terminal
$ clear 

#### using mouse to copy and paste
double click on a string on terminal to copy .
middle click to paste it to terminal .

---------------------------------------------

Part 1 -Learning the Shell

### 1-some Simple commands
date
cal(calendar)
df(disk free)
free
exit
ctrl+alt+F1/alt+F1/alt+F7(virtual terminals)

---------------------------------------------


### 2-Navigation
pwd (print working directory)
cd (Change directory)
ls (List directory contents)

Relative Pathnames
cd . #current working directory
cd .. #parent directory
cd - #previous working directory
cd ~user_name #home directory of user_name
filename punctuation characters can use period,dash,and underscore.


---------------------------------------------


### 3-Exploring The System
ls     #List directory contents
file filename #Determine file type
less filename #View file contents


#### Options and arguments
command -options arguments

#### less Command
Page Up or b //Scroll back one page
Page Down or space //Scroll forward one page
Up Arrow //Scroll up one line
Down Arrow //Scroll down one line
G //Move to the end of the text file
1G or g //Move to the beginning of the text file
/characters //Search forward to the next occurrence of characters
n //Search for the next occurrence of the previous search
h //Display help screen
q //Quit less

#### Directories on Linux System
"Everything is a file","Every files is a series of binary numbers","There are no secrets in Linuxs".

/ //The root directory.
/bin //Contains binaries(programs)
/boot //Linux kernel,initial RAM disk image
/dev  //all devices
/etc  //all of the system-wide configuration files.
/home //each user is given a directory in /home
/lib  //shared library files used by the core system programs.
/media  //removable media such as USB drivers,CD-ROMs
/opt   //install optional software.commercial software products.
/tmp  //storage of temporary,transient files.
/usr   //all the programs.It is the largest one.
/usr/bin  //executable programs installed by Linux distribution.
/usr/lib //shared libraries for the programs in /usr/bin
/usr/local //The programs are not include your distribution but are installed.programs compiled frome source code are installed in /usr/local/bin
/usr/sbin  //more system administration programs
/usr/share  //all the shared data used by programs in /usr/bin.

#### Sysbolic Links
lrwxrwxrwx 1 root root 11 2007-08-11 07:34 libc.so.6 -> libc-2.6.so

use sysbolic licks points to a real file.
Does this solve the problem of the version upgrade.back to older version.
we just use sysbolic links. Creating a new link but same name when changing version. 

#### Summing up
In linux there are many important files that are plain human-readable text.Linux makes everything avalible for examination and study.


---------------------------------------------



### 4-Manipulating Files And Directory
cp  #Copy files and directories
mv  #Move/rename files and directories
mkdir  #Create directories
rm   #Remove files and directories
ln   #Create hard and symbolic links

#### cp
eg:we copy all the HTML files from one directory to another,but only copy files that do not exist in the destination directory.
cp -u *.html destination
cp item1 item2   //overwrite item2.
cp item ... directory  //copy many files to directory.
cp dir1/* dir2
cp -r dir1 dir2 //copy files of dir1 to dir2, if dir2 does not exist,it will be created.

-r --recursive //Recursively copy files 
-u --update   //only copy file don't exist in dir.
-v --verbose //display message of copy.


#### mv
mv item1 item2
mv item .. directory
mv file1 file2
mv -i file1 file2
mv file1 file2 dir1
mv dir1 dir2
mv [!G]* dir //move all not beginning with G files.

-i --interactive //Before overwriting an existing file ,prompt the user for comfirmation.
-u --update  //only moving file don't exist.
-v --verbose  //Display informative message.

#### mkdir
mkdir dir1
mkdir dir1 dir2 dir3

#### rm-remove
rm item
rm file1
rm -i file1 //prompted for confirmation
rm -r file1 dir1 //delete file1 and dir1
rm -rf file dir1  //delte
rm -r *  //delete all files in dir

-i --interactive //prompt user confirmation.
-r --recursive
-f --force //Ignore nonexistent files and do not 
prompt.
-v --verbose //Display informative message.

> Be careful with rm
Unix-like operating systems such as Linux do not have an undelete command.Once you delete something with rm,it's gone.
Be particularly careful with wildcards.
rm * .html //will delete all files and .html 
rm *.html  //will delete all matches *.html
Here is a useful tip.When you use wildcards with rm,test the wildcard first whith ls. Then press up arrow key to recall the command and replace the ls with rm.

#### ln-Create links
ln file link  //to create a hard link
ln -s item link /to create a symbolic link,item is either a file or a directory.


#### wildcards
wildcard can be used with any command that accepts filename and arguments.
*  //Matches any characters
?  //Matches any single character.
[characters]  //Matches any character that is a member of the set characters.
[!characters]  //Matches not in set characters.
[[:class:]]   //Matches any character is a specified class.
character class
[:alnum:]  //Matches any alphanumeric
[:alpha:]  //Matches any alphabetic
[:digit:]  //Matches any numeral
[:lower:]  //Matches any lowercase letter
[:upper:]  //Matches any uppercase letter
Wildcard Examples
*  //All files 
g* //any files beginning with "g"
b*.txt 
Data???
[abc]*  //any files beginning with either "a" or "b" or "c".
backup.[0-9] 
[[:upper:]]*  //any files beginning with a uppercase letter


#### Hard Links
ln filename linkname  
eg:
ln fun fun-hard
ln fun dir1/fun-hard
Hard link only reference a file.
A file aways have at least one link because the file's name is created by a link.
It is helpful to imagine that file is made up of two parts:the data part contaning the file's contents and the name part hold the file's namel.we create hard links,actually creating addtional name part that all refer to the same data part.
Each hard link refer to a specific disk blocks(called an inode) containing the file's contents.ls -i can see the inode of file.file and hard link share the same inode number.
ls -li
12353538 -rw-r--r-- 4 me me 1650 2008-01-10 16:33 fun
12353538 -rw-r--r-- 4 me me 1650 2008-01-10 16:33 fun-hard

#### Symbolic Links
Symbolic links can reference file and directory.
Symbolic links are a special type of file contains a text pointer to the targer file or directory.

ln -s item symbolicLinkName
eg:
ln -s fun fun-sym
ln -s dir1 mydir 

ls -li 
531766 -rw-rw-r-- 1 taogen taogen 24 Nov 24 08:41 test2.txt
656038 lrwxrwxrwx 1 taogen taogen 9 Nov 24 09:12 test2 -> test2.txt

rm a file,hard link is available.but symbolic link is broken.because a hard link reference disk block,but a symbolic link refer a file or directory.

create a file's symbolic link with the GUI
ctrl+shift drag the file.
create a file's copy with GUI
ctrl+alt drag the file


---------------------------------------------



### 5-Working With Commands
type //Indicate how a command name is interpreted
which //Display which executeable program will be executed.
help //Get help for shell builtins.
man //Display a command's manual page.
apropos //Display a list of appropriate commands.
info //Display a command's info entry.
whatis //Display a very brief decription of a command.
alias //Create an alias for a command.

#### What are command?
A command can be one of four different things:
1.An executable program.Those files we saw in /usr/bin or /bin. Programs can be compiled binary. such as programs written in C and C++, or programs written in scripting language such as shell,python,perl,ruby.
2.A command built into the shell itself.
bash supports a number of command internally called shell builtins.The cd command is a shell builtin.
3.A shell function.
These are miniature shell scripts incorporated into environment.
4.An alias.
Commands that we can define ourselves,built from other commands.

#### type 
type command //Display A command's type.
eg:
$ type type
type is a shell builtin
$ type ls
ls is aliased to `ls --color=tty'
$ type cp
cp is /bin/cp

#### which
which command //Display a command's An executable's location.
eg:
$ which ls
/bin/ls

which only works for executable programs, not builtins nor alias that are substitutes for actual executable programs.

#### Getting A Command's Documentation
help 
help command//get help for shell builtins command
bash has a built-in help available for each of the shell builtins. 
eg:
help cd


--help 
--help command //Dispaly usage information


man
man command //Display a program's manual page

Most executable programs provide a formal piece of documentation called a manual or man page.

man page contain a title, command's syntax, a descrioption of the command, command's options.

On most Linux systems, man uses less to display the manual page.


whatis 
whatis command//Display a very brief description of a command.
eg:
$ whatis ls
ls (1)    - list directory contents

info
info command //Display a program's info entry

readme and other program documentation files
Many software package installed on your system have documentation files residing in the /usr/share/doc directory.

#### creating your own command with alias

trick:It's possible to put more than one command on a line by separating each command with a semicolon character.
command1; command2; command3...
eg:
$ cd /usr; ls; cd -

create a alias
alias name='string'
eg:
1.check the foo command is exist
$ type foo 
bash: type: foo: not found
2.creating a alias 
$ alias foo='cd /usr; ls; cd -'
3.use alias command
$ foo
$ type foo
foo is aliased to `cd /usr; ls ; cd -'
4.remove alias
$ unalias foo
$ type foo
bash: type: foo: not found

There is one tiny problem we create aliases on command line.They will gone when your shell session ends (exit the terminal).
we can add our own aliases to the files that establish the environment each time we log on.



---------------------------------------------



### 6-Redirection
I/O redirection
pipelines

cat //Concatenate files
sort //Sort lines of text
uniq //Report or omit repeated lines
grep //Print lines matching a pattern
wc //Print newline,word,and byte counts for each file.
head //Output the first part of a file.
tail //Output the last part of a file.
tee //Read from standard input and write to standard out and files.

Standard Input:
input with keyboard.
I/O redirection:
to change where output goes and where input come from.Normally,output goes to the screen and input come from keyboard.But with I/O redirection,we can change thar.

#### Redirecting Standard Output 
redirect standard output to another file instead of the screen.we use the > redirection operator followed by the name of the file.
It's useful to store the output of a command in a file.

redirection overwriting file
$ ls -l /usr/bin > ls-output.txt

create a new file or empty file 
$ > filename
$ > ls-output.txt

redirection append file
$ ls -l /usr/bin >> ls-output.txt

> and >> don't redirect a Standard Error.just redirect a Standard Output.When command have some error,the error message will send Standrad Error and it will display on the screen. 

#### Redirecting Standard Error
referred file streams as standard input,standard output,standard error by 0,1,2.
redirection standard error just use 2>
eg:
ls -l /bin/usr 2> ls-error.txt

#### Redirection standard output and standard error
we redirect both standard output and standard error at some time.There are two ways to do this.
First.the traditional way,which works with old versions of the shell:
$ ls -l /bin/usr > ls-output.txt 2>&1
Second 
$ ls -l /bin/usr &> ls-output.txt

#### Disposing of Unwanted Output
The file /dev/null accepts input and does nothing with it .
eg:
ls -l /bin/usr 2> /dev/null 

#### Redirecting Standard Input
cat //Concatenate Files
The cat command reads one or more files and copies them to standard output.
cat it to display files without pages.
cat often used to display short text files.
cat filename can use wildcards.such as * or ?.
use cat command: cat filename
eg:
$ cat file1.txt
$ cat file1.txt file2.txt
$ cat file* > file.txt

$ cat  //not given any arguments, it reads from standard input copy to output standard.type ctrl+d end of file(EOF).
$ cat > file.txt //standard input to file 
$ cat < file.txt  //file to standard output


#### Pipelines
To read data from standard input and send ro standard output is by a shell feature called pipelines.
Using pipe operator "|"(vertical bar)
understand: command1's standard output as command2's standard input

command1 | command2 
eg:
$ ls -l /usr/bin | less
$ ls | less
$ dpkg --list | grep chrome //command1:list package.command2 search chrome from command1 Soutput.

##### Filters
Pipelines are often used to perform complex operations on data.It is possible to put several commands together into a piprline.
The way are filters.Filters take input,change it somehow and the output it.

sort
sort //sorting line of output
$ ls /bin /usr/bin | sort | less

uniq
uniq //Omit repeated lines
uniq -d //only print duplicate lines.
$ ls /bin /usr/bin | sort | uniq |less   
$ ls /bin /usr/bin | sort | uniq -d |less 

wc 
wc filename //print line,word,and byte counts of file.
wc -l filename /print line counts of file.
$ wc ls-output.txt
7902 64566 503634 ls-output.txt
$ ls /bin /usr/bin | sort | uniq | wc -l

grep 
grep pattern filename  //find text pattern within files.e
$ grep "public" test.java //"public" or public
$ ls /bin /usr/bin | sort | uniq | grep zip

head/tail
head filename //print first part of files,default 10 lines.
tail filename //print last part of files.
head -n filename //print first n line of files.
$ head -n 5 ls-output.txt
$ head -5 ls-output.txt
$ tail -n 5 ls-output.txt
$ ls /bin | head -n 5
tail -f file //continues to monitor the file.when new lines are appended,they immediately appear on the display.This continue until you Ctrl+c to kill process.
$ tail -f /var/log/syslog

tee 
tee //read from Stdin and output to Stdout 
tee file //read from Stdin and output to  files
$ ls /bin | tee ls.txt | grep zip
$ ls /bin | tee 



---------------------------------------------



### 7-Seeing The World As The Shell Sees it
echo  //Display a line of text,print text argument on Standard output.
$ echo this is a test
this is a test

#### File Expansion
$ echo *  //display all item of working directory.
Desktop Documents ls-output.txt Music Pictures Public Templates
Videos
$ echo .*  //display hidden files.
$ ls -d .* | less 
$ echo .[!.]* 

#### Tilde Expansion
$ echo ~

#### Arithmetic Expansion
Arithmetic expansion uses : echo $((expression))
we can perform +,-,*,/,%,**
eg:
$ echo $((2+2))
4
$ echo $(($((5**2)) * 3))
75
$ echo $(((5**2) * 3))
75
$ echo Five divided by two equals $((5/2))
Five divided by two equals 2

Brace Expansive
you can create multiple text strings from a pattern containing braces.
$ echo Front-{A,B,C}-Back
Front-A-Back Front-B-Back Front-C-Back
$ echo Number_{1..5}
Number_1 Number_2 Number_3 Number_4 Number_5     
$ echo {01..15}
01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
$ echo {001..15}
001 002 003 004 005 006 007 008 009 010 011 012 013 014 015
$ echo {Z..A}
Z Y X W V U T S R Q P O N M L K J I H G F E D C B A
$ echo a{A{1,2},B{3,4}}b
aA1b aA2b aB3b aB4b

#### make lists of files or directory
$ mkdir Photos
$ cd Photos
$ mkdir {2007..2009}-{01..12}
$ rm -r {2007..2009}*

#### Parameter Expansion
$ USER
taogen

To see a list of available variables 
$ printenv | less


#### Command Substitution
use the output of a command as an expansion
$ echo $(ls)
Desktop Documents ls-output.txt Music Pictures Public Templates
Videos
$ ls -l $(which cp)
-rwxr-xr-x 1 root root 71516 2007-12-05 08:58 /bin/cp
$ file $(ls -d /usr/bin/* | grep zip)

use back-quotes instead of the dollar in older shell programs.eg: 
$ ls -l `which cp`

#### Double quotes
text inside double quotes, all the special characters lose thier special meaning. Such as [],?,*,{.
The exception are "$", "\"(backslash), and "`" (back-quote).
$ ls -l two words.txt
ls: cannot access two: No such file or directory
ls: cannot access words.txt: No such file or directory
$ ls -l "two word.txt"
-rw-rw-r-- 1 me me 18 2008-02-20 13:03 two words.txt
$ echo "$USER $((2+2)) $(cal)"
taogen 4    November 2017      
Su Mo Tu We Th Fr Sa  
          1  2  3  4  
5  6  7  8  9 10 11  
12 13 14 15 16 17 18  
19 20 21 22 23 24 25  
26 27 28 29 30

$ echo this is a    test
this is a test
$ echo "this is a    test"
this is a   test

$ echo $(cal)
February 2008 Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14
15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
$ echo "$(cal)"
   November 2017      
Su Mo Tu We Th Fr Sa  
          1  2  3  4  
 5  6  7  8  9 10 11  
12 13 14 15 16 17 18  
19 20 21 22 23 24 25  
26 27 28 29 30

the unquoted command substitution result in a command line containing 38 arguments.In the second, a command line with one argument that includes the embedded spaces and newlines.


#### single Quotes
using single quotes to suppress all expansions.
comparison of unquoted,double quoted,and single quotes
$ echo text ~/*.txt {a,b} ${echo foo} $((2+2)) $USER
text /home/taogen/test1.txt a b foo 4 taogen
$ echo "text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER"
text ~/*.txt {a,b} foo 4 taogen
$ echo 'text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER'
text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER

#### Escaping Characters
Using \(bacslash) to escape special character.Such as $
$ echo "The balance for user $USER is :\$5.00"
The balance for user taogen is :$5.00
using \ include special character in a filename. Such as "$","!","&"," ",etc 
$ touch t\ est\$.txt

### 8-Advanced KeyBoard Tricks
clear //Clear the screen of terminal
history //Display the content of history list

#### Cursor Movement
ctrl a //Move cursor to the beginning of the line
ctrl e //Move cuesor to the end of the lien.
ctrl f //Move forward one character.
ctrl b //Move backwaed one character.
alt f //Move forward one word.
alt b //Move backward one word.
ctrl l //clear the screen,like clear command.

#### Modifying Text 
ctrl d //Delete the character at cursor location.
ctrl t //Exchange the character at the cursor location with the one perceding.
alt t //Transpose the word before cursor location.
alt l //Convert the character to lowercase.
alt u //convert the character to uppercase.

#### Cutting and Pasting (Killing and Yanking) Text
ctrl k //kill text from the cursor to end of line.
ctrl u //kill text from the cursor to beginning of line.
alt d //kill text from the cursor to end of word.
alt Backspace //kill text from cursor to beginning of word.
ctrl y //paste text from kill text.



---------------------------------------------



### Chapter 8-Advanced Keyboard Tricks

#### mind map

- Advanced Keyboard Tricks
	- Command Line Editing
		- Cursor Movement
		- Modifying Text
		- Cutting And Pasting
	- Completion
	- Using History	 
		- Searching History
		- History Expansion

#### abstract

#### Code & KeyPoint

Command Line Editing  
```
clear or ctrl l  //clear screen  
ctrl u //clear line  
```

completion
```
tab tab
alt ?
alt *
```

Search History
ctrl r































